// +-+-+-+-+-+-+// |y|o|o|n|i|t|// +-+-+-+-+-+-+//// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+// | Yoonit Handshake Plugin for NativeScript applications           |// | Luigui Delyer, Gabriel Rizzo,                                   |// | Haroldo Teruya & Victor Goulart @ Cyberlabs AI 2020-2021        |// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+import { ResultEventData } from '.';import { HandshakeBase } from "./Yoonit.Handshake.common";export class YoonitHandshake extends HandshakeBase {    native: Handshake;    constructor() {        super();        this.native = Handshake.new();        this.native.handshakeListener = HandshakeEventListener.initWithOwner(new WeakRef(this));    }    destroy(): void {        this.native.handshakeListener = null;        (<any>this.native).owner = null;    }    public updateFingerprints(        publicKey: string,        serviceUrl: string    ): void {        this.native.updateFingerprints(publicKey, serviceUrl);    }}@ObjCClass(HandshakeListener)@NativeClassclass HandshakeEventListener extends NSObject implements HandshakeListener {    private owner: WeakRef<YoonitHandshake>;    public static initWithOwner(owner: WeakRef<YoonitHandshake>): HandshakeEventListener {        const listener = HandshakeEventListener.new() as HandshakeEventListener;        listener.owner = owner;        return listener;    }    public onResult(result: HandshakeResult): void {        const owner = this.owner.get();        this.owner.get().        if (owner) {            owner.on("result", function ())            owner.notify({                eventName: "result",                object: owner,                type: "",                result: result.toString(),            } as ResultEventData);        }    }}